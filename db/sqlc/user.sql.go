// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users 
(username,
hashed_pass,
full_name,
email
) 
VALUES ($1,$2,$3,$4) RETURNING username, hashed_pass, full_name, email, created_at, pass_changed
`

type CreateUserParams struct {
	Username   string `json:"username"`
	HashedPass string `json:"hashedPass"`
	FullName   string `json:"fullName"`
	Email      string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPass,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPass,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
		&i.PassChanged,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_pass, full_name, email, created_at, pass_changed FROM users
WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPass,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
		&i.PassChanged,
	)
	return i, err
}
